AWSTemplateFormatVersion: 2010-09-09

Description: >-
  Provisions and deploys AWS Elasticsearch Service (ES) over multiple
  availability zones in a new AWS Virtual Private Cloud (VPC), along with a
  FSCrawler server from which Elasticsearch can be accessed.
Parameters:
  ID:
    Description: >-
      CD unique ID.
    Type: String
    Default: UUID
  ElasticsearchName:
    Description: >-
      The name of the AWS Elasticsearch Service deployment.
    Type: String
    Default: es-domain

  ElasticsearchVersion:
    Default: 7.4
    Type: String
    ConstraintDescription: >-
      Must be an allowed AWS ES version (Major.Minor)
    AllowedValues:
      - 7.4
      - 7.1
      - 6.8
      - 6.7
      - 6.5
      - 6.4
      - 6.3
      - 6.2
      - 6.0
      - 5.6
      - 5.5
      - 5.3
      - 5.1
      - 2.3
      - 1.5

  ElasticsearchMasterInstanceType:
    Description: >-
      Instance type for master nodes.
    Type: String
    Default: t2.small.elasticsearch

  ElasticsearchDataInstanceType:
    Description: >-
      Instance type for data nodes.
    Type: String
    Default: t2.small.elasticsearch

  NumberOfMasterNodes:
    Description: >-
      How many dedicated master nodes you want to have. 3 is recommended.
    Type: Number
    Default: 3
    AllowedValues:
      - 3
      - 5

  NumberOfDataNodes:
    Description: >-
      How many data nodes you want to have. Multiples of your number of
      availability zones (2) is recommended.
    Type: Number
    Default: 2
    MinValue: 2
    MaxValue: 20

  FSCrawlerKeyName:
    Description: >-
      Name of the EC2 KeyPair, which enables SSH access to the FSCrawler server.
    Type: AWS::EC2::KeyPair::KeyName
    Default: fscrawler

  AccessLocation:
    Description: >-
      CIDR range from which SSH access to the FSCrawler server is allowed. Default
      is anywhere.
    Type: String
    Default: "0.0.0.0/0"
    ConstraintDescription: >-
      Must be a valid CIDR range.
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'

  AvailabilityZone1:
    Type: String
    ConstraintDescription: >-
      Must be a valid AWS Availability Zone in eu-west-3.
    Default: eu-west-3a
    AllowedValues:
      - eu-west-3a
      - eu-west-3b
      - eu-west-3c

  AvailabilityZone2:
    Type: String
    ConstraintDescription: >-
      Must be a valid AWS Availability Zone in eu-west-3.
    Default: eu-west-3b
    AllowedValues:
      - eu-west-3a
      - eu-west-3b
      - eu-west-3c

Mappings:
  CidrConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public1:
      CIDR: 10.0.0.0/24
    Public2:
      CIDR: 10.0.1.0/24

Resources:
  # Commun
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      CidrBlock: !FindInMap
        - CidrConfig
        - VPC
        - CIDR

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !FindInMap
        - CidrConfig
        - Public1
        - CIDR
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !FindInMap
        - CidrConfig
        - Public2
        - CIDR
      MapPublicIpOnLaunch: true

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable2

  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # EC2 Instance
  FSCrawlerElasticIp:
    Type: AWS::EC2::EIP

  FSCrawlerElasticIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref FSCrawlerInstance
      EIP: !Ref FSCrawlerElasticIp

  FSCrawlerInstance:
    Type: AWS::EC2::Instance
    DependsOn: InternetGatewayAttachment
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref FSCrawlerKeyName
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref FSCrawlerSecurityGroup
      # Ubuntu Server 20.04 LTS (HVM), SSD Volume Type - ami-0d3f551818b21ed81
      ImageId: ami-0d3f551818b21ed81
      Tags:
        - Key: Name
          Value: !Sub "FSCrawlerInstance-${ID}"

  FSCrawlerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        Allows all ingress from AccessLocation.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref AccessLocation

  ReceiveFromFSCrawlerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        Allows all ingress from FSCrawlerSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !Ref FSCrawlerSecurityGroup

  # ES DOMAIN
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      ElasticsearchVersion: !Ref ElasticsearchVersion
      DomainName: !Ref ElasticsearchName
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: gp2
      ElasticsearchClusterConfig:
        # DedicatedMasterEnabled: true
        # DedicatedMasterType: !Ref ElasticsearchMasterInstanceType
        # DedicatedMasterCount: !Ref NumberOfMasterNodes
        InstanceCount: !Ref NumberOfDataNodes
        InstanceType: !Ref ElasticsearchDataInstanceType
        ZoneAwarenessEnabled: true
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: true
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0
      VPCOptions:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroupIds:
          - !GetAtt ElasticsearchSecurityGroup.GroupId
          - !GetAtt ReceiveFromElasticsearchSecurityGroup.GroupId
          - !GetAtt ReceiveFromFSCrawlerSecurityGroup.GroupId
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: es:*
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchName}/*"
      Tags:
        - Key: Name
          Value: !Sub "ElasticsearchDomain-${ID}"

  ElasticsearchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        Identifies resources, which should have access to one another.
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "EsSg-${ID}"

  ReceiveFromElasticsearchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        Allows ingress from ElasticsearchSecurityGroup.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !GetAtt ElasticsearchSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub "ReceiveFromEsSg-${ID}"

  # BUCKET
  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: Lambda
    Properties:
      BucketName: !Sub bucket-${ID}
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt Lambda.Arn

  # LAMBDA
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                Resource:
                  - !Sub arn:aws:s3:::bucket-${ID}
                  - !Sub arn:aws:s3:::bucket-${ID}/*

  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: Lambda
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Lambda
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::bucket-${ID}

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        Identifies resources, which should have access to one another.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "LambdaSg-${ID}"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Code:
        ZipFile: |
          const fs = require('fs');
          const request = require('request');

          const url = 'https://security.sensiolabs.org/check_lock';

          var formData = {lock: fs.createReadStream(__dirname + '/composer.lock')};

          var req = request.post(
              {
                  headers: {
                    "Accept": "text/plain",
                    "Content-Type": "multipart/form-data"
                  },
                  url: url,
                  formData: formData
              }, function(err, resp, body) 
              {
                  if (err) {
                    console.log('Error!');
                  } else {
                    console.log(resp.statusCode);
                    console.log('body is ' + body);
                    console.log(JSON.stringify(resp));
                  }
              }
          );

      Runtime: nodejs12.x
      Timeout: 50
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2

Outputs:
  S3BucketSecureURL:
    Value: !Join ["", ["https://", !GetAtt S3Bucket.DomainName]]
    Export:
      Name: !Sub "S3BucketSecureURL-${ID}"

  ESDomainEndpoint:
    Value: !GetAtt ElasticsearchDomain.DomainEndpoint
    Export:
      Name: !Sub "ESDomainEndpoint-${ID}"

  FSCrawlerPublicIp:
    Value: !GetAtt FSCrawlerInstance.PublicDnsName
    Export:
      Name: !Sub "FSCrawlerPublicIp-${ID}"
